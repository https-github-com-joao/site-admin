{"version":3,"file":"index.m.js","sources":["../src/constants.js","../src/index.js"],"sourcesContent":["export const WHITELIST_STATES = [\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  21,\n  22,\n  24,\n  27,\n  28,\n  31,\n  32,\n  33,\n  34,\n  35,\n  37,\n  38,\n  41,\n  42,\n  43,\n  44,\n  45,\n  46,\n  47,\n  48,\n  49,\n  51,\n  53,\n  54,\n  55,\n  61,\n  62,\n  63,\n  64,\n  65,\n  66,\n  67,\n  68,\n  69,\n  71,\n  73,\n  74,\n  75,\n  77,\n  79,\n  81,\n  82,\n  83,\n  84,\n  85,\n  86,\n  87,\n  88,\n  89,\n  91,\n  92,\n  93,\n  94,\n  95,\n  96,\n  97,\n  98,\n  99,\n];\nexport const PHONE_MIN_LENGTH = 10;\nexport const PHONE_MAX_LENGTH = 11;\nexport const LANDLINE_NUMBERS = [2, 3, 4, 5];\nexport const MOBILE_NUMBERS = [6, 7, 8, 9];\n","import onlyNumbers from '@brazilian-utils/helper-only-numbers';\n\nimport { PHONE_MIN_LENGTH, PHONE_MAX_LENGTH, MOBILE_NUMBERS, LANDLINE_NUMBERS, WHITELIST_STATES } from './constants';\n\n/**\n * Check if the length of phone number is valid.\n *\n * @param {*} phone\n */\nconst isValidLength = phone => phone.length >= PHONE_MIN_LENGTH && phone.length <= PHONE_MAX_LENGTH;\n\n/**\n * Check if the phone is a landline or mobile valid\n * Landline numbers start with digits 2 through 5;\n * Mobile numbers start with digits 6 through 9;\n * But as of 2017 all mobile numbers in Brazil start with the digit 9.\n *\n * @param {*} phone\n * @returns\n */\nconst isValidNumberStart = phone => {\n  if (phone.length === PHONE_MIN_LENGTH) {\n    return LANDLINE_NUMBERS.includes(Number(phone.charAt(2)));\n  }\n\n  return MOBILE_NUMBERS.includes(Number(phone.charAt(2)));\n};\n\nconst isValidCode = phone => WHITELIST_STATES.includes(Number(phone.substr(0, 2)));\n\n/**\n * Check if the phone number is valid.\n *\n * @param {*} phone\n */\nexport default function isValidPhone(phone) {\n  if (!phone) return false;\n\n  const numericPhone = onlyNumbers(phone);\n\n  return isValidLength(numericPhone) && isValidCode(numericPhone) && isValidNumberStart(numericPhone);\n}\n"],"names":["const","WHITELIST_STATES","LANDLINE_NUMBERS","MOBILE_NUMBERS","isValidLength","phone","length","isValidNumberStart","includes","Number","charAt","isValidCode","substr","numericPhone","onlyNumbers"],"mappings":"oDAAOA,IAAMC,GACX,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAIWC,GAAoB,EAAG,EAAG,EAAG,GAC7BC,GAAkB,EAAG,EAAG,EAAG,GC/DlCC,WAAgBC,UAASA,EAAMC,QD4DL,IC5DmCD,EAAMC,QD6DzC,IClD1BC,WAAqBF,GACzB,ODgD8B,KChD1BA,EAAMC,OACDJ,EAAiBM,SAASC,OAAOJ,EAAMK,OAAO,KAGhDP,EAAeK,SAASC,OAAOJ,EAAMK,OAAO,MAG/CC,WAAcN,UAASJ,EAAiBO,SAASC,OAAOJ,EAAMO,OAAO,EAAG,qBAO/D,SAAsBP,GACnC,IAAKA,EAAO,OAAO,EAEnBL,IAAMa,EAAeC,EAAYT,GAEjC,OAAOD,EAAcS,IAAiBF,EAAYE,IAAiBN,EAAmBM"}